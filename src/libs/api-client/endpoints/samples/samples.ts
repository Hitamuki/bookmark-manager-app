/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * Bookmark Manager App API
 * APIドキュメント
 * OpenAPI spec version: v0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateSampleDto,
  SampleControllerSearchSamples200,
  SampleControllerSearchSamplesParams,
  SampleDto,
  UpdateSampleDto
} from '../../model';





export type sampleControllerSearchSamplesResponse200 = {
  data: SampleControllerSearchSamples200
  status: 200
}
    
export type sampleControllerSearchSamplesResponseSuccess = (sampleControllerSearchSamplesResponse200) & {
  headers: Headers;
};
;

export type sampleControllerSearchSamplesResponse = (sampleControllerSearchSamplesResponseSuccess)

export const getSampleControllerSearchSamplesUrl = (params?: SampleControllerSearchSamplesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/api/samples?${stringifiedParams}` : `/api/samples`
}

export const sampleControllerSearchSamples = async (params?: SampleControllerSearchSamplesParams, options?: RequestInit): Promise<sampleControllerSearchSamplesResponse> => {
  
  const res = await fetch(getSampleControllerSearchSamplesUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: sampleControllerSearchSamplesResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as sampleControllerSearchSamplesResponse
}





export const getSampleControllerSearchSamplesQueryKey = (params?: SampleControllerSearchSamplesParams,) => {
    return [
    `/api/samples`, ...(params ? [params]: [])
    ] as const;
    }

    
export const getSampleControllerSearchSamplesQueryOptions = <TData = Awaited<ReturnType<typeof sampleControllerSearchSamples>>, TError = unknown>(params?: SampleControllerSearchSamplesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof sampleControllerSearchSamples>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSampleControllerSearchSamplesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof sampleControllerSearchSamples>>> = ({ signal }) => sampleControllerSearchSamples(params, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof sampleControllerSearchSamples>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SampleControllerSearchSamplesQueryResult = NonNullable<Awaited<ReturnType<typeof sampleControllerSearchSamples>>>
export type SampleControllerSearchSamplesQueryError = unknown


export function useSampleControllerSearchSamples<TData = Awaited<ReturnType<typeof sampleControllerSearchSamples>>, TError = unknown>(
 params: undefined |  SampleControllerSearchSamplesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof sampleControllerSearchSamples>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof sampleControllerSearchSamples>>,
          TError,
          Awaited<ReturnType<typeof sampleControllerSearchSamples>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSampleControllerSearchSamples<TData = Awaited<ReturnType<typeof sampleControllerSearchSamples>>, TError = unknown>(
 params?: SampleControllerSearchSamplesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof sampleControllerSearchSamples>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof sampleControllerSearchSamples>>,
          TError,
          Awaited<ReturnType<typeof sampleControllerSearchSamples>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSampleControllerSearchSamples<TData = Awaited<ReturnType<typeof sampleControllerSearchSamples>>, TError = unknown>(
 params?: SampleControllerSearchSamplesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof sampleControllerSearchSamples>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useSampleControllerSearchSamples<TData = Awaited<ReturnType<typeof sampleControllerSearchSamples>>, TError = unknown>(
 params?: SampleControllerSearchSamplesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof sampleControllerSearchSamples>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSampleControllerSearchSamplesQueryOptions(params,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export type sampleControllerCreateSampleResponse201 = {
  data: void
  status: 201
}
    
export type sampleControllerCreateSampleResponseSuccess = (sampleControllerCreateSampleResponse201) & {
  headers: Headers;
};
;

export type sampleControllerCreateSampleResponse = (sampleControllerCreateSampleResponseSuccess)

export const getSampleControllerCreateSampleUrl = () => {


  

  return `/api/samples`
}

export const sampleControllerCreateSample = async (createSampleDto: CreateSampleDto, options?: RequestInit): Promise<sampleControllerCreateSampleResponse> => {
  
  const res = await fetch(getSampleControllerCreateSampleUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createSampleDto,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: sampleControllerCreateSampleResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as sampleControllerCreateSampleResponse
}




export const getSampleControllerCreateSampleMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sampleControllerCreateSample>>, TError,{data: CreateSampleDto}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof sampleControllerCreateSample>>, TError,{data: CreateSampleDto}, TContext> => {

const mutationKey = ['sampleControllerCreateSample'];
const {mutation: mutationOptions, fetch: fetchOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, fetch: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof sampleControllerCreateSample>>, {data: CreateSampleDto}> = (props) => {
          const {data} = props ?? {};

          return  sampleControllerCreateSample(data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SampleControllerCreateSampleMutationResult = NonNullable<Awaited<ReturnType<typeof sampleControllerCreateSample>>>
    export type SampleControllerCreateSampleMutationBody = CreateSampleDto
    export type SampleControllerCreateSampleMutationError = unknown

    export const useSampleControllerCreateSample = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sampleControllerCreateSample>>, TError,{data: CreateSampleDto}, TContext>, fetch?: RequestInit}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof sampleControllerCreateSample>>,
        TError,
        {data: CreateSampleDto},
        TContext
      > => {

      const mutationOptions = getSampleControllerCreateSampleMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    export type sampleControllerGetSampleByIdResponse200 = {
  data: SampleDto
  status: 200
}
    
export type sampleControllerGetSampleByIdResponseSuccess = (sampleControllerGetSampleByIdResponse200) & {
  headers: Headers;
};
;

export type sampleControllerGetSampleByIdResponse = (sampleControllerGetSampleByIdResponseSuccess)

export const getSampleControllerGetSampleByIdUrl = (id: string,) => {


  

  return `/api/samples/${id}`
}

export const sampleControllerGetSampleById = async (id: string, options?: RequestInit): Promise<sampleControllerGetSampleByIdResponse> => {
  
  const res = await fetch(getSampleControllerGetSampleByIdUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: sampleControllerGetSampleByIdResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as sampleControllerGetSampleByIdResponse
}





export const getSampleControllerGetSampleByIdQueryKey = (id?: string,) => {
    return [
    `/api/samples/${id}`
    ] as const;
    }

    
export const getSampleControllerGetSampleByIdQueryOptions = <TData = Awaited<ReturnType<typeof sampleControllerGetSampleById>>, TError = unknown>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof sampleControllerGetSampleById>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSampleControllerGetSampleByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof sampleControllerGetSampleById>>> = ({ signal }) => sampleControllerGetSampleById(id, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof sampleControllerGetSampleById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SampleControllerGetSampleByIdQueryResult = NonNullable<Awaited<ReturnType<typeof sampleControllerGetSampleById>>>
export type SampleControllerGetSampleByIdQueryError = unknown


export function useSampleControllerGetSampleById<TData = Awaited<ReturnType<typeof sampleControllerGetSampleById>>, TError = unknown>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof sampleControllerGetSampleById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof sampleControllerGetSampleById>>,
          TError,
          Awaited<ReturnType<typeof sampleControllerGetSampleById>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSampleControllerGetSampleById<TData = Awaited<ReturnType<typeof sampleControllerGetSampleById>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof sampleControllerGetSampleById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof sampleControllerGetSampleById>>,
          TError,
          Awaited<ReturnType<typeof sampleControllerGetSampleById>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSampleControllerGetSampleById<TData = Awaited<ReturnType<typeof sampleControllerGetSampleById>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof sampleControllerGetSampleById>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useSampleControllerGetSampleById<TData = Awaited<ReturnType<typeof sampleControllerGetSampleById>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof sampleControllerGetSampleById>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSampleControllerGetSampleByIdQueryOptions(id,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export type sampleControllerUpdateSampleByIdResponse200 = {
  data: void
  status: 200
}
    
export type sampleControllerUpdateSampleByIdResponseSuccess = (sampleControllerUpdateSampleByIdResponse200) & {
  headers: Headers;
};
;

export type sampleControllerUpdateSampleByIdResponse = (sampleControllerUpdateSampleByIdResponseSuccess)

export const getSampleControllerUpdateSampleByIdUrl = (id: string,) => {


  

  return `/api/samples/${id}`
}

export const sampleControllerUpdateSampleById = async (id: string,
    updateSampleDto: UpdateSampleDto, options?: RequestInit): Promise<sampleControllerUpdateSampleByIdResponse> => {
  
  const res = await fetch(getSampleControllerUpdateSampleByIdUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updateSampleDto,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: sampleControllerUpdateSampleByIdResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as sampleControllerUpdateSampleByIdResponse
}




export const getSampleControllerUpdateSampleByIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sampleControllerUpdateSampleById>>, TError,{id: string;data: UpdateSampleDto}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof sampleControllerUpdateSampleById>>, TError,{id: string;data: UpdateSampleDto}, TContext> => {

const mutationKey = ['sampleControllerUpdateSampleById'];
const {mutation: mutationOptions, fetch: fetchOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, fetch: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof sampleControllerUpdateSampleById>>, {id: string;data: UpdateSampleDto}> = (props) => {
          const {id,data} = props ?? {};

          return  sampleControllerUpdateSampleById(id,data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SampleControllerUpdateSampleByIdMutationResult = NonNullable<Awaited<ReturnType<typeof sampleControllerUpdateSampleById>>>
    export type SampleControllerUpdateSampleByIdMutationBody = UpdateSampleDto
    export type SampleControllerUpdateSampleByIdMutationError = unknown

    export const useSampleControllerUpdateSampleById = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sampleControllerUpdateSampleById>>, TError,{id: string;data: UpdateSampleDto}, TContext>, fetch?: RequestInit}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof sampleControllerUpdateSampleById>>,
        TError,
        {id: string;data: UpdateSampleDto},
        TContext
      > => {

      const mutationOptions = getSampleControllerUpdateSampleByIdMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    export type sampleControllerDeleteSampleByIdResponse200 = {
  data: void
  status: 200
}
    
export type sampleControllerDeleteSampleByIdResponseSuccess = (sampleControllerDeleteSampleByIdResponse200) & {
  headers: Headers;
};
;

export type sampleControllerDeleteSampleByIdResponse = (sampleControllerDeleteSampleByIdResponseSuccess)

export const getSampleControllerDeleteSampleByIdUrl = (id: string,) => {


  

  return `/api/samples/${id}`
}

export const sampleControllerDeleteSampleById = async (id: string, options?: RequestInit): Promise<sampleControllerDeleteSampleByIdResponse> => {
  
  const res = await fetch(getSampleControllerDeleteSampleByIdUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: sampleControllerDeleteSampleByIdResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as sampleControllerDeleteSampleByIdResponse
}




export const getSampleControllerDeleteSampleByIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sampleControllerDeleteSampleById>>, TError,{id: string}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof sampleControllerDeleteSampleById>>, TError,{id: string}, TContext> => {

const mutationKey = ['sampleControllerDeleteSampleById'];
const {mutation: mutationOptions, fetch: fetchOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, fetch: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof sampleControllerDeleteSampleById>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  sampleControllerDeleteSampleById(id,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SampleControllerDeleteSampleByIdMutationResult = NonNullable<Awaited<ReturnType<typeof sampleControllerDeleteSampleById>>>
    
    export type SampleControllerDeleteSampleByIdMutationError = unknown

    export const useSampleControllerDeleteSampleById = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sampleControllerDeleteSampleById>>, TError,{id: string}, TContext>, fetch?: RequestInit}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof sampleControllerDeleteSampleById>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getSampleControllerDeleteSampleByIdMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    