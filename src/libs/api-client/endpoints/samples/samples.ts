/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * Bookmark Manager App API
 * API„Éâ„Ç≠„É•„É°„É≥„Éà
 * OpenAPI spec version: v0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  CreateSampleDto,
  SampleControllerSearchSamples200,
  SampleControllerSearchSamplesParams,
  SampleDto,
  UpdateSampleDto
} from '../../model';





export const sampleControllerSearchSamples = (
    params?: SampleControllerSearchSamplesParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SampleControllerSearchSamples200>> => {
    
    
    return axios.get(
      `/api/samples`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }




export const getSampleControllerSearchSamplesQueryKey = (params?: SampleControllerSearchSamplesParams,) => {
    return [
    `/api/samples`, ...(params ? [params]: [])
    ] as const;
    }

    
export const getSampleControllerSearchSamplesQueryOptions = <TData = Awaited<ReturnType<typeof sampleControllerSearchSamples>>, TError = AxiosError<unknown>>(params?: SampleControllerSearchSamplesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof sampleControllerSearchSamples>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSampleControllerSearchSamplesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof sampleControllerSearchSamples>>> = ({ signal }) => sampleControllerSearchSamples(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof sampleControllerSearchSamples>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SampleControllerSearchSamplesQueryResult = NonNullable<Awaited<ReturnType<typeof sampleControllerSearchSamples>>>
export type SampleControllerSearchSamplesQueryError = AxiosError<unknown>


export function useSampleControllerSearchSamples<TData = Awaited<ReturnType<typeof sampleControllerSearchSamples>>, TError = AxiosError<unknown>>(
 params: undefined |  SampleControllerSearchSamplesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof sampleControllerSearchSamples>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof sampleControllerSearchSamples>>,
          TError,
          Awaited<ReturnType<typeof sampleControllerSearchSamples>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSampleControllerSearchSamples<TData = Awaited<ReturnType<typeof sampleControllerSearchSamples>>, TError = AxiosError<unknown>>(
 params?: SampleControllerSearchSamplesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof sampleControllerSearchSamples>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof sampleControllerSearchSamples>>,
          TError,
          Awaited<ReturnType<typeof sampleControllerSearchSamples>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSampleControllerSearchSamples<TData = Awaited<ReturnType<typeof sampleControllerSearchSamples>>, TError = AxiosError<unknown>>(
 params?: SampleControllerSearchSamplesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof sampleControllerSearchSamples>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useSampleControllerSearchSamples<TData = Awaited<ReturnType<typeof sampleControllerSearchSamples>>, TError = AxiosError<unknown>>(
 params?: SampleControllerSearchSamplesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof sampleControllerSearchSamples>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSampleControllerSearchSamplesQueryOptions(params,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const sampleControllerCreateSample = (
    createSampleDto: CreateSampleDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.post(
      `/api/samples`,
      createSampleDto,options
    );
  }



export const getSampleControllerCreateSampleMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sampleControllerCreateSample>>, TError,{data: CreateSampleDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof sampleControllerCreateSample>>, TError,{data: CreateSampleDto}, TContext> => {

const mutationKey = ['sampleControllerCreateSample'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof sampleControllerCreateSample>>, {data: CreateSampleDto}> = (props) => {
          const {data} = props ?? {};

          return  sampleControllerCreateSample(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SampleControllerCreateSampleMutationResult = NonNullable<Awaited<ReturnType<typeof sampleControllerCreateSample>>>
    export type SampleControllerCreateSampleMutationBody = CreateSampleDto
    export type SampleControllerCreateSampleMutationError = AxiosError<unknown>

    export const useSampleControllerCreateSample = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sampleControllerCreateSample>>, TError,{data: CreateSampleDto}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof sampleControllerCreateSample>>,
        TError,
        {data: CreateSampleDto},
        TContext
      > => {

      const mutationOptions = getSampleControllerCreateSampleMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    export const sampleControllerGetSampleById = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SampleDto>> => {
    
    
    return axios.get(
      `/api/samples/${id}`,options
    );
  }




export const getSampleControllerGetSampleByIdQueryKey = (id?: string,) => {
    return [
    `/api/samples/${id}`
    ] as const;
    }

    
export const getSampleControllerGetSampleByIdQueryOptions = <TData = Awaited<ReturnType<typeof sampleControllerGetSampleById>>, TError = AxiosError<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof sampleControllerGetSampleById>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSampleControllerGetSampleByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof sampleControllerGetSampleById>>> = ({ signal }) => sampleControllerGetSampleById(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof sampleControllerGetSampleById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SampleControllerGetSampleByIdQueryResult = NonNullable<Awaited<ReturnType<typeof sampleControllerGetSampleById>>>
export type SampleControllerGetSampleByIdQueryError = AxiosError<unknown>


export function useSampleControllerGetSampleById<TData = Awaited<ReturnType<typeof sampleControllerGetSampleById>>, TError = AxiosError<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof sampleControllerGetSampleById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof sampleControllerGetSampleById>>,
          TError,
          Awaited<ReturnType<typeof sampleControllerGetSampleById>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSampleControllerGetSampleById<TData = Awaited<ReturnType<typeof sampleControllerGetSampleById>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof sampleControllerGetSampleById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof sampleControllerGetSampleById>>,
          TError,
          Awaited<ReturnType<typeof sampleControllerGetSampleById>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSampleControllerGetSampleById<TData = Awaited<ReturnType<typeof sampleControllerGetSampleById>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof sampleControllerGetSampleById>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useSampleControllerGetSampleById<TData = Awaited<ReturnType<typeof sampleControllerGetSampleById>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof sampleControllerGetSampleById>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSampleControllerGetSampleByIdQueryOptions(id,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const sampleControllerUpdateSampleById = (
    id: string,
    updateSampleDto: UpdateSampleDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.put(
      `/api/samples/${id}`,
      updateSampleDto,options
    );
  }



export const getSampleControllerUpdateSampleByIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sampleControllerUpdateSampleById>>, TError,{id: string;data: UpdateSampleDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof sampleControllerUpdateSampleById>>, TError,{id: string;data: UpdateSampleDto}, TContext> => {

const mutationKey = ['sampleControllerUpdateSampleById'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof sampleControllerUpdateSampleById>>, {id: string;data: UpdateSampleDto}> = (props) => {
          const {id,data} = props ?? {};

          return  sampleControllerUpdateSampleById(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SampleControllerUpdateSampleByIdMutationResult = NonNullable<Awaited<ReturnType<typeof sampleControllerUpdateSampleById>>>
    export type SampleControllerUpdateSampleByIdMutationBody = UpdateSampleDto
    export type SampleControllerUpdateSampleByIdMutationError = AxiosError<unknown>

    export const useSampleControllerUpdateSampleById = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sampleControllerUpdateSampleById>>, TError,{id: string;data: UpdateSampleDto}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof sampleControllerUpdateSampleById>>,
        TError,
        {id: string;data: UpdateSampleDto},
        TContext
      > => {

      const mutationOptions = getSampleControllerUpdateSampleByIdMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    export const sampleControllerDeleteSampleById = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `/api/samples/${id}`,options
    );
  }



export const getSampleControllerDeleteSampleByIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sampleControllerDeleteSampleById>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof sampleControllerDeleteSampleById>>, TError,{id: string}, TContext> => {

const mutationKey = ['sampleControllerDeleteSampleById'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof sampleControllerDeleteSampleById>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  sampleControllerDeleteSampleById(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SampleControllerDeleteSampleByIdMutationResult = NonNullable<Awaited<ReturnType<typeof sampleControllerDeleteSampleById>>>
    
    export type SampleControllerDeleteSampleByIdMutationError = AxiosError<unknown>

    export const useSampleControllerDeleteSampleById = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sampleControllerDeleteSampleById>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof sampleControllerDeleteSampleById>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getSampleControllerDeleteSampleByIdMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    