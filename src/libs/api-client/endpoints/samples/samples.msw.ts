/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * Bookmark Manager App API
 * APIドキュメント
 * OpenAPI spec version: v0.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';
import type {
  RequestHandlerOptions
} from 'msw';

import type {
  SampleControllerSearchSamples200,
  SampleDto
} from '../../model';


export const getSampleControllerSearchSamplesResponseMock = (): SampleControllerSearchSamples200 => ({...{total: faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), count: faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), offset: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined]), limit: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined])},...{data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.alpha({length: {min: 10, max: 20}}), title: faker.string.alpha({length: {min: 10, max: 20}})})), undefined])},})

export const getSampleControllerGetSampleByIdResponseMock = (overrideResponse: Partial< SampleDto > = {}): SampleDto => ({id: faker.string.alpha({length: {min: 10, max: 20}}), title: faker.string.alpha({length: {min: 10, max: 20}}), ...overrideResponse})


export const getSampleControllerSearchSamplesMockHandler = (overrideResponse?: SampleControllerSearchSamples200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<SampleControllerSearchSamples200> | SampleControllerSearchSamples200), options?: RequestHandlerOptions) => {
  return http.get('*/api/samples', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getSampleControllerSearchSamplesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  }, options)
}

export const getSampleControllerCreateSampleMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void), options?: RequestHandlerOptions) => {
  return http.post('*/api/samples', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  }, options)
}

export const getSampleControllerGetSampleByIdMockHandler = (overrideResponse?: SampleDto | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<SampleDto> | SampleDto), options?: RequestHandlerOptions) => {
  return http.get('*/api/samples/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getSampleControllerGetSampleByIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  }, options)
}

export const getSampleControllerUpdateSampleByIdMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<void> | void), options?: RequestHandlerOptions) => {
  return http.put('*/api/samples/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  }, options)
}

export const getSampleControllerDeleteSampleByIdMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void), options?: RequestHandlerOptions) => {
  return http.delete('*/api/samples/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  }, options)
}
export const getSamplesMock = () => [
  getSampleControllerSearchSamplesMockHandler(),
  getSampleControllerCreateSampleMockHandler(),
  getSampleControllerGetSampleByIdMockHandler(),
  getSampleControllerUpdateSampleByIdMockHandler(),
  getSampleControllerDeleteSampleByIdMockHandler()
]
